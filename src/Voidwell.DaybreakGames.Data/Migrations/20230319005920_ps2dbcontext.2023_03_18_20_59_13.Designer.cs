// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voidwell.DaybreakGames.Data;

#nullable disable

namespace Voidwell.DaybreakGames.Data.Migrations
{
    [DbContext(typeof(PS2DbContext))]
    [Migration("20230319005920_ps2dbcontext.2023_03_18_20_59_13")]
    partial class ps2dbcontext2023_03_18_20_59_13
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ObjectiveGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("objective_group_id");

                    b.Property<bool>("Repeatable")
                        .HasColumnType("boolean")
                        .HasColumnName("repeatable");

                    b.Property<int?>("RewardId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_id");

                    b.HasKey("Id")
                        .HasName("p_k_achievement");

                    b.ToTable("achievement", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Alert", b =>
                {
                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("MetagameInstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("metagame_instance_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<float?>("LastFactionNc")
                        .HasColumnType("real")
                        .HasColumnName("last_faction_nc");

                    b.Property<float?>("LastFactionNs")
                        .HasColumnType("real")
                        .HasColumnName("last_faction_ns");

                    b.Property<float?>("LastFactionTr")
                        .HasColumnType("real")
                        .HasColumnName("last_faction_tr");

                    b.Property<float?>("LastFactionVs")
                        .HasColumnType("real")
                        .HasColumnName("last_faction_vs");

                    b.Property<int?>("MetagameEventId")
                        .HasColumnType("integer")
                        .HasColumnName("metagame_event_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<float?>("StartFactionNc")
                        .HasColumnType("real")
                        .HasColumnName("start_faction_nc");

                    b.Property<float?>("StartFactionNs")
                        .HasColumnType("real")
                        .HasColumnName("start_faction_ns");

                    b.Property<float?>("StartFactionTr")
                        .HasColumnType("real")
                        .HasColumnName("start_faction_tr");

                    b.Property<float?>("StartFactionVs")
                        .HasColumnType("real")
                        .HasColumnName("start_faction_vs");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("WorldId", "MetagameInstanceId")
                        .HasName("p_k_alert");

                    b.ToTable("alert", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Character", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("BattleRank")
                        .HasColumnType("integer")
                        .HasColumnName("battle_rank");

                    b.Property<int>("BattleRankPercentToNext")
                        .HasColumnType("integer")
                        .HasColumnName("battle_rank_percent_to_next");

                    b.Property<int>("CertsEarned")
                        .HasColumnType("integer")
                        .HasColumnName("certs_earned");

                    b.Property<int>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PrestigeLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("prestige_level");

                    b.Property<int>("TitleId")
                        .HasColumnType("integer")
                        .HasColumnName("title_id");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.HasKey("Id")
                        .HasName("p_k_character");

                    b.HasIndex("Name")
                        .HasDatabaseName("i_x_character_name");

                    b.ToTable("character", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterAchievement", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<int?>("EarnedCount")
                        .HasColumnType("integer")
                        .HasColumnName("earned_count");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("finish_date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.HasKey("CharacterId", "AchievementId")
                        .HasName("p_k_character_achievement");

                    b.ToTable("character_achievement", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterDirective", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("DirectiveId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_id");

                    b.Property<DateTime?>("CompletionTimeDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completion_time_date");

                    b.Property<int>("DirectiveTreeId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tree_id");

                    b.HasKey("CharacterId", "DirectiveId")
                        .HasName("p_k_character_directive");

                    b.ToTable("character_directive", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterDirectiveObjective", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("DirectiveId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_id");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("integer")
                        .HasColumnName("objective_id");

                    b.Property<int>("ObjectiveGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("objective_group_id");

                    b.Property<int?>("StateData")
                        .HasColumnType("integer")
                        .HasColumnName("state_data");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("CharacterId", "DirectiveId", "ObjectiveId")
                        .HasName("p_k_character_directive_objective");

                    b.ToTable("character_directive_objective", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterDirectiveTier", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("DirectiveTreeId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tree_id");

                    b.Property<int>("DirectiveTierId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tier_id");

                    b.Property<DateTime?>("CompletionTimeDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completion_time_date");

                    b.HasKey("CharacterId", "DirectiveTreeId", "DirectiveTierId")
                        .HasName("p_k_character_directive_tier");

                    b.ToTable("character_directive_tier", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterDirectiveTree", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("DirectiveTreeId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tree_id");

                    b.Property<DateTime?>("CompletionTimeDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completion_time_date");

                    b.Property<int>("CurrentDirectiveTierId")
                        .HasColumnType("integer")
                        .HasColumnName("current_directive_tier_id");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("integer")
                        .HasColumnName("current_level");

                    b.HasKey("CharacterId", "DirectiveTreeId")
                        .HasName("p_k_character_directive_tree");

                    b.ToTable("character_directive_tree", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int?>("AchievementCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("achievement_count");

                    b.Property<int?>("AssistCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("assist_count");

                    b.Property<int?>("DominationCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("domination_count");

                    b.Property<int?>("FacilityCaptureCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("facility_capture_count");

                    b.Property<int?>("FacilityDefendedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("facility_defended_count");

                    b.Property<int?>("MedalCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("medal_count");

                    b.Property<int?>("RevengeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("revenge_count");

                    b.Property<int?>("SkillPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("skill_points");

                    b.Property<int?>("WeaponDamageGiven")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_damage_given");

                    b.Property<int?>("WeaponDamageTakenBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_damage_taken_by");

                    b.Property<int?>("WeaponDeaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_deaths");

                    b.Property<int?>("WeaponFireCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_fire_count");

                    b.Property<int?>("WeaponHeadshots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_headshots");

                    b.Property<int?>("WeaponHitCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_hit_count");

                    b.Property<int?>("WeaponKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_kills");

                    b.Property<int?>("WeaponPlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_play_time");

                    b.Property<int?>("WeaponScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_score");

                    b.Property<int?>("WeaponVehicleKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_vehicle_kills");

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_lifetime_stat");

                    b.ToTable("character_lifetime_stat", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int?>("DominationCountNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("domination_count_nc");

                    b.Property<int?>("DominationCountTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("domination_count_tr");

                    b.Property<int?>("DominationCountVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("domination_count_vs");

                    b.Property<int?>("FacilityCaptureCountNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("facility_capture_count_nc");

                    b.Property<int?>("FacilityCaptureCountTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("facility_capture_count_tr");

                    b.Property<int?>("FacilityCaptureCountVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("facility_capture_count_vs");

                    b.Property<int?>("RevengeCountNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("revenge_count_nc");

                    b.Property<int?>("RevengeCountTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("revenge_count_tr");

                    b.Property<int?>("RevengeCountVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("revenge_count_vs");

                    b.Property<int?>("WeaponDamageGivenNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_damage_given_nc");

                    b.Property<int?>("WeaponDamageGivenTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_damage_given_tr");

                    b.Property<int?>("WeaponDamageGivenVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_damage_given_vs");

                    b.Property<int?>("WeaponDamageTakenByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_damage_taken_by_nc");

                    b.Property<int?>("WeaponDamageTakenByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_damage_taken_by_tr");

                    b.Property<int?>("WeaponDamageTakenByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_damage_taken_by_vs");

                    b.Property<int?>("WeaponHeadshotsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_headshots_nc");

                    b.Property<int?>("WeaponHeadshotsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_headshots_tr");

                    b.Property<int?>("WeaponHeadshotsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_headshots_vs");

                    b.Property<int?>("WeaponKilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_killed_by_nc");

                    b.Property<int?>("WeaponKilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_killed_by_tr");

                    b.Property<int?>("WeaponKilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_killed_by_vs");

                    b.Property<int?>("WeaponKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_kills_nc");

                    b.Property<int?>("WeaponKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_kills_tr");

                    b.Property<int?>("WeaponKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_kills_vs");

                    b.Property<int?>("WeaponVehicleKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_vehicle_kills_nc");

                    b.Property<int?>("WeaponVehicleKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_vehicle_kills_tr");

                    b.Property<int?>("WeaponVehicleKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weapon_vehicle_kills_vs");

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_lifetime_stat_by_faction");

                    b.ToTable("character_lifetime_stat_by_faction", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterRating", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<double>("Deviation")
                        .HasColumnType("double precision")
                        .HasColumnName("deviation");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<double>("Volatility")
                        .HasColumnType("double precision")
                        .HasColumnName("volatility");

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_rating");

                    b.HasIndex("Rating")
                        .HasDatabaseName("i_x_character_rating_rating");

                    b.ToTable("character_rating", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStat", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int?>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("deaths");

                    b.Property<int?>("FireCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("fire_count");

                    b.Property<int?>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("hit_count");

                    b.Property<int?>("KilledBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killed_by");

                    b.Property<int?>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills");

                    b.Property<int?>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("play_time");

                    b.Property<int?>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("score");

                    b.HasKey("CharacterId", "ProfileId")
                        .HasName("p_k_character_stat");

                    b.ToTable("character_stat", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatByFaction", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int?>("KilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killed_by_nc");

                    b.Property<int?>("KilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killed_by_tr");

                    b.Property<int?>("KilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killed_by_vs");

                    b.Property<int?>("KillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills_nc");

                    b.Property<int?>("KillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills_tr");

                    b.Property<int?>("KillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills_vs");

                    b.HasKey("CharacterId", "ProfileId")
                        .HasName("p_k_character_stat_by_faction");

                    b.ToTable("character_stat_by_faction", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatHistory", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<string>("StatName")
                        .HasColumnType("text")
                        .HasColumnName("stat_name");

                    b.Property<int>("AllTime")
                        .HasColumnType("integer")
                        .HasColumnName("all_time");

                    b.Property<string>("Day")
                        .HasColumnType("text")
                        .HasColumnName("day");

                    b.Property<string>("Month")
                        .HasColumnType("text")
                        .HasColumnName("month");

                    b.Property<int>("OneLifeMax")
                        .HasColumnType("integer")
                        .HasColumnName("one_life_max");

                    b.Property<string>("Week")
                        .HasColumnType("text")
                        .HasColumnName("week");

                    b.HasKey("CharacterId", "StatName")
                        .HasName("p_k_character_stat_history");

                    b.ToTable("character_stat_history", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login_date");

                    b.Property<DateTime>("LastSaveDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_save_date");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("minutes_played");

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_time");

                    b.ToTable("character_time", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterUpdateQueue", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("CharacterId")
                        .HasName("p_k_character_update_queue");

                    b.ToTable("character_update_queue");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStat", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("DamageGiven")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage_given");

                    b.Property<int?>("DamageTakenBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage_taken_by");

                    b.Property<int?>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("deaths");

                    b.Property<int?>("FireCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("fire_count");

                    b.Property<int?>("Headshots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("headshots");

                    b.Property<int?>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("hit_count");

                    b.Property<int?>("KilledBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killed_by");

                    b.Property<int?>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills");

                    b.Property<int?>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("play_time");

                    b.Property<int?>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("score");

                    b.Property<int?>("VehicleKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("vehicle_kills");

                    b.HasKey("CharacterId", "ItemId", "VehicleId")
                        .HasName("p_k_character_weapon_stat");

                    b.HasIndex("ItemId", "Kills")
                        .HasDatabaseName("i_x_character_weapon_stat_item_id_kills");

                    b.ToTable("character_weapon_stat", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStatByFaction", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("DamageGivenNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage_given_nc");

                    b.Property<int?>("DamageGivenTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage_given_tr");

                    b.Property<int?>("DamageGivenVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage_given_vs");

                    b.Property<int?>("DamageTakenByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage_taken_by_nc");

                    b.Property<int?>("DamageTakenByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage_taken_by_tr");

                    b.Property<int?>("DamageTakenByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("damage_taken_by_vs");

                    b.Property<int?>("HeadshotsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("headshots_nc");

                    b.Property<int?>("HeadshotsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("headshots_tr");

                    b.Property<int?>("HeadshotsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("headshots_vs");

                    b.Property<int?>("KilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killed_by_nc");

                    b.Property<int?>("KilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killed_by_tr");

                    b.Property<int?>("KilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("killed_by_vs");

                    b.Property<int?>("KillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills_nc");

                    b.Property<int?>("KillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills_tr");

                    b.Property<int?>("KillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills_vs");

                    b.Property<int?>("VehicleKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("vehicle_kills_nc");

                    b.Property<int?>("VehicleKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("vehicle_kills_tr");

                    b.Property<int?>("VehicleKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("vehicle_kills_vs");

                    b.HasKey("CharacterId", "ItemId", "VehicleId")
                        .HasName("p_k_character_weapon_stat_by_faction");

                    b.ToTable("character_weapon_stat_by_faction", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DailyPopulation", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("AvgPlayTime")
                        .HasColumnType("integer")
                        .HasColumnName("avg_play_time");

                    b.Property<int>("NcAvgPlayTime")
                        .HasColumnType("integer")
                        .HasColumnName("nc_avg_play_time");

                    b.Property<int>("NcCount")
                        .HasColumnType("integer")
                        .HasColumnName("nc_count");

                    b.Property<int>("NsAvgPlayTime")
                        .HasColumnType("integer")
                        .HasColumnName("ns_avg_play_time");

                    b.Property<int>("NsCount")
                        .HasColumnType("integer")
                        .HasColumnName("ns_count");

                    b.Property<int>("TrAvgPlayTime")
                        .HasColumnType("integer")
                        .HasColumnName("tr_avg_play_time");

                    b.Property<int>("TrCount")
                        .HasColumnType("integer")
                        .HasColumnName("tr_count");

                    b.Property<int>("VsAvgPlayTime")
                        .HasColumnType("integer")
                        .HasColumnName("vs_avg_play_time");

                    b.Property<int>("VsCount")
                        .HasColumnType("integer")
                        .HasColumnName("vs_count");

                    b.HasKey("Date", "WorldId")
                        .HasName("p_k_daily_population");

                    b.ToTable("daily_population", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DailyWeaponStats", b =>
                {
                    b.Property<int>("WeaponId")
                        .HasColumnType("integer")
                        .HasColumnName("weapon_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int>("AircraftKills")
                        .HasColumnType("integer")
                        .HasColumnName("aircraft_kills");

                    b.Property<float>("AircraftKpu")
                        .HasColumnType("real")
                        .HasColumnName("aircraft_kpu");

                    b.Property<float>("AvgBr")
                        .HasColumnType("real")
                        .HasColumnName("avg_br");

                    b.Property<int>("Headshots")
                        .HasColumnType("integer")
                        .HasColumnName("headshots");

                    b.Property<int>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<float>("Kpu")
                        .HasColumnType("real")
                        .HasColumnName("kpu");

                    b.Property<float>("Q1Kpu")
                        .HasColumnType("real")
                        .HasColumnName("q1_kpu");

                    b.Property<float>("Q2Kpu")
                        .HasColumnType("real")
                        .HasColumnName("q2_kpu");

                    b.Property<float>("Q3Kpu")
                        .HasColumnType("real")
                        .HasColumnName("q3_kpu");

                    b.Property<int>("Q4Headshots")
                        .HasColumnType("integer")
                        .HasColumnName("q4_headshots");

                    b.Property<int>("Q4Kills")
                        .HasColumnType("integer")
                        .HasColumnName("q4_kills");

                    b.Property<float>("Q4Kpu")
                        .HasColumnType("real")
                        .HasColumnName("q4_kpu");

                    b.Property<int>("Q4Uniques")
                        .HasColumnType("integer")
                        .HasColumnName("q4_uniques");

                    b.Property<int>("Uniques")
                        .HasColumnType("integer")
                        .HasColumnName("uniques");

                    b.Property<int>("VehicleKills")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_kills");

                    b.Property<float>("VehicleKpu")
                        .HasColumnType("real")
                        .HasColumnName("vehicle_kpu");

                    b.HasKey("WeaponId", "Date")
                        .HasName("p_k_daily_weapon_stats");

                    b.ToTable("daily_weapon_stats", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Directive", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DirectiveTierId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tier_id");

                    b.Property<int>("DirectiveTreeId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tree_id");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<int?>("ImageSetId")
                        .HasColumnType("integer")
                        .HasColumnName("image_set_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ObjectiveSetId")
                        .HasColumnType("integer")
                        .HasColumnName("objective_set_id");

                    b.Property<int?>("QualifyRequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("qualify_requirement_id");

                    b.HasKey("Id")
                        .HasName("p_k_directive");

                    b.ToTable("directive", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DirectiveTier", b =>
                {
                    b.Property<int>("DirectiveTreeId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tree_id");

                    b.Property<int>("DirectiveTierId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tier_id");

                    b.Property<int>("CompletionCount")
                        .HasColumnType("integer")
                        .HasColumnName("completion_count");

                    b.Property<int?>("DirectivePoints")
                        .HasColumnType("integer")
                        .HasColumnName("directive_points");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<int?>("ImageSetId")
                        .HasColumnType("integer")
                        .HasColumnName("image_set_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RewardSetId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_set_id");

                    b.HasKey("DirectiveTreeId", "DirectiveTierId")
                        .HasName("p_k_directive_tier");

                    b.ToTable("directive_tier", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DirectiveTree", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DirectiveTreeCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("directive_tree_category_id");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<int?>("ImageSetId")
                        .HasColumnType("integer")
                        .HasColumnName("image_set_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_directive_tree");

                    b.ToTable("directive_tree", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DirectiveTreeCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_directive_tree_category");

                    b.ToTable("directive_tree_category", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.AchievementEarned", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement_id");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("CharacterId", "Timestamp")
                        .HasName("p_k_event_achievement_earned");

                    b.ToTable("event_achievement_earned", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.BattlerankUp", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("BattleRank")
                        .HasColumnType("integer")
                        .HasColumnName("battle_rank");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("CharacterId", "Timestamp", "BattleRank")
                        .HasName("p_k_event_battlerank_up");

                    b.ToTable("event_battlerank_up", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.ContinentLock", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.Property<int?>("MetagameEventId")
                        .HasColumnType("integer")
                        .HasColumnName("metagame_event_id");

                    b.Property<float?>("PopulationNc")
                        .HasColumnType("real")
                        .HasColumnName("population_nc");

                    b.Property<float?>("PopulationTr")
                        .HasColumnType("real")
                        .HasColumnName("population_tr");

                    b.Property<float?>("PopulationVs")
                        .HasColumnType("real")
                        .HasColumnName("population_vs");

                    b.Property<int?>("TriggeringFaction")
                        .HasColumnType("integer")
                        .HasColumnName("triggering_faction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId")
                        .HasName("p_k_event_continent_lock");

                    b.ToTable("event_continent_lock", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.ContinentUnlock", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.Property<int?>("MetagameEventId")
                        .HasColumnType("integer")
                        .HasColumnName("metagame_event_id");

                    b.Property<int?>("TriggeringFaction")
                        .HasColumnType("integer")
                        .HasColumnName("triggering_faction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId")
                        .HasName("p_k_event_continent_unlock");

                    b.ToTable("event_continent_unlock", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.Death", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("AttackerCharacterId")
                        .HasColumnType("text")
                        .HasColumnName("attacker_character_id");

                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int?>("AttackerFireModeId")
                        .HasColumnType("integer")
                        .HasColumnName("attacker_fire_mode_id");

                    b.Property<int?>("AttackerLoadoutId")
                        .HasColumnType("integer")
                        .HasColumnName("attacker_loadout_id");

                    b.Property<string>("AttackerOutfitId")
                        .HasColumnType("text")
                        .HasColumnName("attacker_outfit_id");

                    b.Property<int?>("AttackerVehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("attacker_vehicle_id");

                    b.Property<int?>("AttackerWeaponId")
                        .HasColumnType("integer")
                        .HasColumnName("attacker_weapon_id");

                    b.Property<int?>("CharacterLoadoutId")
                        .HasColumnType("integer")
                        .HasColumnName("character_loadout_id");

                    b.Property<string>("CharacterOutfitId")
                        .HasColumnType("text")
                        .HasColumnName("character_outfit_id");

                    b.Property<bool>("IsHeadshot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_headshot");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId")
                        .HasName("p_k_event_death");

                    b.HasIndex("AttackerWeaponId", "Timestamp")
                        .HasDatabaseName("i_x_event_death_attacker_weapon_id_timestamp");

                    b.ToTable("event_death", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.FacilityControl", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("FacilityId")
                        .HasColumnType("integer")
                        .HasColumnName("facility_id");

                    b.Property<int?>("NewFactionId")
                        .HasColumnType("integer")
                        .HasColumnName("new_faction_id");

                    b.Property<int>("DurationHeld")
                        .HasColumnType("integer")
                        .HasColumnName("duration_held");

                    b.Property<int?>("OldFactionId")
                        .HasColumnType("integer")
                        .HasColumnName("old_faction_id");

                    b.Property<string>("OutfitId")
                        .HasColumnType("text")
                        .HasColumnName("outfit_id");

                    b.Property<float?>("ZoneControlNc")
                        .HasColumnType("real")
                        .HasColumnName("zone_control_nc");

                    b.Property<float?>("ZoneControlNs")
                        .HasColumnType("real")
                        .HasColumnName("zone_control_ns");

                    b.Property<float?>("ZoneControlTr")
                        .HasColumnType("real")
                        .HasColumnName("zone_control_tr");

                    b.Property<float?>("ZoneControlVs")
                        .HasColumnType("real")
                        .HasColumnName("zone_control_vs");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.Property<int?>("ZonePopulationNc")
                        .HasColumnType("integer")
                        .HasColumnName("zone_population_nc");

                    b.Property<int?>("ZonePopulationNs")
                        .HasColumnType("integer")
                        .HasColumnName("zone_population_ns");

                    b.Property<int?>("ZonePopulationTr")
                        .HasColumnType("integer")
                        .HasColumnName("zone_population_tr");

                    b.Property<int?>("ZonePopulationVs")
                        .HasColumnType("integer")
                        .HasColumnName("zone_population_vs");

                    b.HasKey("Timestamp", "WorldId", "FacilityId", "NewFactionId")
                        .HasName("p_k_event_facility_control");

                    b.ToTable("event_facility_control", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.GainExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("integer")
                        .HasColumnName("experience_id");

                    b.Property<int?>("LoadoutId")
                        .HasColumnType("integer")
                        .HasColumnName("loadout_id");

                    b.Property<string>("OtherId")
                        .HasColumnType("text")
                        .HasColumnName("other_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Id")
                        .HasName("p_k_event_gain_experience");

                    b.HasIndex("Timestamp", "CharacterId", "ExperienceId")
                        .HasDatabaseName("i_x_event_gain_experience_timestamp_character_id_experience_id");

                    b.HasIndex("Timestamp", "WorldId", "ExperienceId", "ZoneId")
                        .HasDatabaseName("i_x_event_gain_experience_timestamp_world_id_experience_id_zone");

                    b.ToTable("event_gain_experience", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.MetagameEvent", b =>
                {
                    b.Property<int>("MetagameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("metagame_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MetagameId"));

                    b.Property<int?>("ExperienceBonus")
                        .HasColumnType("integer")
                        .HasColumnName("experience_bonus");

                    b.Property<int?>("InstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("instance_id");

                    b.Property<int?>("MetagameEventId")
                        .HasColumnType("integer")
                        .HasColumnName("metagame_event_id");

                    b.Property<string>("MetagameEventState")
                        .HasColumnType("text")
                        .HasColumnName("metagame_event_state");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<float?>("ZoneControlNc")
                        .HasColumnType("real")
                        .HasColumnName("zone_control_nc");

                    b.Property<float?>("ZoneControlTr")
                        .HasColumnType("real")
                        .HasColumnName("zone_control_tr");

                    b.Property<float?>("ZoneControlVs")
                        .HasColumnType("real")
                        .HasColumnName("zone_control_vs");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("MetagameId")
                        .HasName("p_k_event_metagame_event");

                    b.ToTable("event_metagame_event", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerFacilityCapture", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("FacilityId")
                        .HasColumnType("integer")
                        .HasColumnName("facility_id");

                    b.Property<string>("OutfitId")
                        .HasColumnType("text")
                        .HasColumnName("outfit_id");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId")
                        .HasName("p_k_event_player_facility_capture");

                    b.ToTable("event_player_facility_capture", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerFacilityDefend", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("FacilityId")
                        .HasColumnType("integer")
                        .HasColumnName("facility_id");

                    b.Property<string>("OutfitId")
                        .HasColumnType("text")
                        .HasColumnName("outfit_id");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId")
                        .HasName("p_k_event_player_facility_defend");

                    b.ToTable("event_player_facility_defend", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerLogin", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.HasKey("Timestamp", "CharacterId")
                        .HasName("p_k_event_player_login");

                    b.HasIndex("Timestamp", "WorldId")
                        .HasDatabaseName("i_x_event_player_login_timestamp_world_id");

                    b.ToTable("event_player_login", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerLogout", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.HasKey("Timestamp", "CharacterId")
                        .HasName("p_k_event_player_logout");

                    b.HasIndex("Timestamp", "WorldId")
                        .HasDatabaseName("i_x_event_player_logout_timestamp_world_id");

                    b.ToTable("event_player_logout", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.VehicleDestroy", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("AttackerCharacterId")
                        .HasColumnType("text")
                        .HasColumnName("attacker_character_id");

                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int?>("AttackerVehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("attacker_vehicle_id");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("AttackerLoadoutId")
                        .HasColumnType("integer")
                        .HasColumnName("attacker_loadout_id");

                    b.Property<int?>("AttackerWeaponId")
                        .HasColumnType("integer")
                        .HasColumnName("attacker_weapon_id");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("integer")
                        .HasColumnName("facility_id");

                    b.Property<int?>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId", "AttackerVehicleId", "VehicleId")
                        .HasName("p_k_event_vehicle_destroy");

                    b.HasIndex("AttackerWeaponId", "Timestamp")
                        .HasDatabaseName("i_x_event_vehicle_destroy_attacker_weapon_id_timestamp");

                    b.ToTable("event_vehicle_destroy", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Experience", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<float>("Xp")
                        .HasColumnType("real")
                        .HasColumnName("xp");

                    b.HasKey("Id")
                        .HasName("p_k_experience");

                    b.ToTable("experience", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.FacilityLink", b =>
                {
                    b.Property<int>("FacilityIdA")
                        .HasColumnType("integer")
                        .HasColumnName("facility_id_a");

                    b.Property<int>("FacilityIdB")
                        .HasColumnType("integer")
                        .HasColumnName("facility_id_b");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("FacilityIdA", "FacilityIdB")
                        .HasName("p_k_facility_link");

                    b.ToTable("facility_link", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Faction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("CodeTag")
                        .HasColumnType("text")
                        .HasColumnName("code_tag");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("UserSelectable")
                        .HasColumnType("boolean")
                        .HasColumnName("user_selectable");

                    b.HasKey("Id")
                        .HasName("p_k_faction");

                    b.ToTable("faction", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.ImageSet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("TypeDescription")
                        .HasColumnType("text")
                        .HasColumnName("type_description");

                    b.HasKey("Id", "TypeId")
                        .HasName("p_k_image_set");

                    b.ToTable("image_set", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Item", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsVehicleWeapon")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vehicle_weapon");

                    b.Property<int?>("ItemCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("item_category_id");

                    b.Property<int?>("ItemTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("item_type_id");

                    b.Property<int?>("MaxStackSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_stack_size");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_item");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_item_category");

                    b.ToTable("item_category", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Loadout", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("CodeName")
                        .HasColumnType("text")
                        .HasColumnName("code_name");

                    b.Property<int>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.HasKey("Id")
                        .HasName("p_k_loadout");

                    b.ToTable("loadout", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MapHex", b =>
                {
                    b.Property<int>("MapRegionId")
                        .HasColumnType("integer")
                        .HasColumnName("map_region_id");

                    b.Property<int>("XPos")
                        .HasColumnType("integer")
                        .HasColumnName("x_pos");

                    b.Property<int>("YPos")
                        .HasColumnType("integer")
                        .HasColumnName("y_pos");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.Property<int>("HexType")
                        .HasColumnType("integer")
                        .HasColumnName("hex_type");

                    b.Property<string>("TypeName")
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.HasKey("MapRegionId", "XPos", "YPos", "ZoneId")
                        .HasName("p_k_map_hex");

                    b.ToTable("map_hex", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MapRegion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("integer")
                        .HasColumnName("facility_id");

                    b.Property<string>("FacilityName")
                        .HasColumnType("text")
                        .HasColumnName("facility_name");

                    b.Property<string>("FacilityType")
                        .HasColumnType("text")
                        .HasColumnName("facility_type");

                    b.Property<int?>("FacilityTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("facility_type_id");

                    b.Property<float?>("XPos")
                        .HasColumnType("real")
                        .HasColumnName("x_pos");

                    b.Property<float?>("YPos")
                        .HasColumnType("real")
                        .HasColumnName("y_pos");

                    b.Property<float?>("ZPos")
                        .HasColumnType("real")
                        .HasColumnName("z_pos");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Id")
                        .HasName("p_k_map_region");

                    b.ToTable("map_region", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MetagameEventCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("ExperienceBonus")
                        .HasColumnType("integer")
                        .HasColumnName("experience_bonus");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_metagame_event_category");

                    b.ToTable("metagame_event_category", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MetagameEventCategoryZone", b =>
                {
                    b.Property<int>("MetagameEventCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("metagame_event_category_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("MetagameEventCategoryId")
                        .HasName("p_k_metagame_event_category_zone");

                    b.ToTable("metagame_event_category_zone", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MetagameEventState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_metagame_event_state");

                    b.ToTable("metagame_event_state", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Objective", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("ObjectiveGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("objective_group_id");

                    b.Property<int>("ObjectiveTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("objective_type_id");

                    b.Property<string>("Param1")
                        .HasColumnType("text")
                        .HasColumnName("param1");

                    b.Property<string>("Param2")
                        .HasColumnType("text")
                        .HasColumnName("param2");

                    b.Property<string>("Param3")
                        .HasColumnType("text")
                        .HasColumnName("param3");

                    b.Property<string>("Param4")
                        .HasColumnType("text")
                        .HasColumnName("param4");

                    b.Property<string>("Param5")
                        .HasColumnType("text")
                        .HasColumnName("param5");

                    b.Property<string>("Param6")
                        .HasColumnType("text")
                        .HasColumnName("param6");

                    b.Property<string>("Param7")
                        .HasColumnType("text")
                        .HasColumnName("param7");

                    b.Property<string>("Param8")
                        .HasColumnType("text")
                        .HasColumnName("param8");

                    b.Property<string>("Param9")
                        .HasColumnType("text")
                        .HasColumnName("param9");

                    b.HasKey("Id")
                        .HasName("p_k_objective");

                    b.ToTable("objective", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.ObjectiveSetToObjective", b =>
                {
                    b.Property<int>("ObjectiveSetId")
                        .HasColumnType("integer")
                        .HasColumnName("objective_set_id");

                    b.Property<int>("ObjectiveGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("objective_group_id");

                    b.HasKey("ObjectiveSetId")
                        .HasName("p_k_objective_set_to_objective");

                    b.ToTable("objective_set_to_objective", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Outfit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<string>("LeaderCharacterId")
                        .HasColumnType("text")
                        .HasColumnName("leader_character_id");

                    b.Property<int>("MemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("member_count");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.HasKey("Id")
                        .HasName("p_k_outfit");

                    b.ToTable("outfit", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<DateTime?>("MemberSinceDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("member_since_date");

                    b.Property<string>("OutfitId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("outfit_id");

                    b.Property<string>("Rank")
                        .HasColumnType("text")
                        .HasColumnName("rank");

                    b.Property<int?>("RankOrdinal")
                        .HasColumnType("integer")
                        .HasColumnName("rank_ordinal");

                    b.HasKey("CharacterId")
                        .HasName("p_k_outfit_member");

                    b.ToTable("outfit_member", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.PlayerSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("character_id");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("login_date");

                    b.Property<DateTime>("LogoutDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logout_date");

                    b.HasKey("Id")
                        .HasName("p_k_player_session");

                    b.HasIndex("CharacterId", "LoginDate", "LogoutDate")
                        .HasDatabaseName("i_x_player_session_character_id_login_date_logout_date");

                    b.ToTable("player_session", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Profile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProfileTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_type_id");

                    b.HasKey("Id")
                        .HasName("p_k_profile");

                    b.ToTable("profile", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Reward", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("CountMax")
                        .HasColumnType("integer")
                        .HasColumnName("count_max");

                    b.Property<int>("CountMin")
                        .HasColumnType("integer")
                        .HasColumnName("count_min");

                    b.Property<int?>("Param1")
                        .HasColumnType("integer")
                        .HasColumnName("param1");

                    b.Property<int?>("Param2")
                        .HasColumnType("integer")
                        .HasColumnName("param2");

                    b.Property<int?>("Param3")
                        .HasColumnType("integer")
                        .HasColumnName("param3");

                    b.Property<int?>("Param4")
                        .HasColumnType("integer")
                        .HasColumnName("param4");

                    b.Property<int?>("Param5")
                        .HasColumnType("integer")
                        .HasColumnName("param5");

                    b.Property<int>("RewardTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_type_id");

                    b.HasKey("Id")
                        .HasName("p_k_reward");

                    b.ToTable("reward", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.RewardGroupToReward", b =>
                {
                    b.Property<int>("RewardGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_group_id");

                    b.Property<int>("RewardId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_id");

                    b.HasKey("RewardGroupId", "RewardId")
                        .HasName("p_k_reward_group_to_reward");

                    b.ToTable("reward_group_to_reward", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.RewardSetToRewardGroup", b =>
                {
                    b.Property<int>("RewardSetId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_set_id");

                    b.Property<int>("RewardGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("reward_group_id");

                    b.HasKey("RewardSetId", "RewardGroupId")
                        .HasName("p_k_reward_set_to_reward_group");

                    b.ToTable("reward_set_to_reward_group", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.SanctionedWeapon", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("p_k_sanctioned_weapon");

                    b.ToTable("sanctioned_weapon", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Title", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_title");

                    b.ToTable("title", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<int?>("CostResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("cost_resource_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_vehicle");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.VehicleFaction", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.Property<int>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.HasKey("VehicleId", "FactionId")
                        .HasName("p_k_vehicle_faction");

                    b.ToTable("vehicle_faction", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.WeaponAggregate", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.Property<float?>("AVGAccuracy")
                        .HasColumnType("real")
                        .HasColumnName("avg_accuracy");

                    b.Property<float?>("AVGDeaths")
                        .HasColumnType("real")
                        .HasColumnName("avg_deaths");

                    b.Property<float?>("AVGFireCount")
                        .HasColumnType("real")
                        .HasColumnName("avg_fire_count");

                    b.Property<float?>("AVGHeadshots")
                        .HasColumnType("real")
                        .HasColumnName("avg_headshots");

                    b.Property<float?>("AVGHitCount")
                        .HasColumnType("real")
                        .HasColumnName("avg_hit_count");

                    b.Property<float?>("AVGHsr")
                        .HasColumnType("real")
                        .HasColumnName("avg_hsr");

                    b.Property<float?>("AVGKdr")
                        .HasColumnType("real")
                        .HasColumnName("avg_kdr");

                    b.Property<float?>("AVGKills")
                        .HasColumnType("real")
                        .HasColumnName("avg_kills");

                    b.Property<float?>("AVGKph")
                        .HasColumnType("real")
                        .HasColumnName("avg_kph");

                    b.Property<float?>("AVGPlayTime")
                        .HasColumnType("real")
                        .HasColumnName("avg_play_time");

                    b.Property<float?>("AVGScore")
                        .HasColumnType("real")
                        .HasColumnName("avg_score");

                    b.Property<float?>("AVGVehicleKills")
                        .HasColumnType("real")
                        .HasColumnName("avg_vehicle_kills");

                    b.Property<float?>("AVGVkph")
                        .HasColumnType("real")
                        .HasColumnName("avg_vkph");

                    b.Property<float?>("STDAccuracy")
                        .HasColumnType("real")
                        .HasColumnName("std_accuracy");

                    b.Property<float?>("STDDeaths")
                        .HasColumnType("real")
                        .HasColumnName("std_deaths");

                    b.Property<float?>("STDFireCount")
                        .HasColumnType("real")
                        .HasColumnName("std_fire_count");

                    b.Property<float?>("STDHeadshots")
                        .HasColumnType("real")
                        .HasColumnName("std_headshots");

                    b.Property<float?>("STDHitCount")
                        .HasColumnType("real")
                        .HasColumnName("std_hit_count");

                    b.Property<float?>("STDHsr")
                        .HasColumnType("real")
                        .HasColumnName("std_hsr");

                    b.Property<float?>("STDKdr")
                        .HasColumnType("real")
                        .HasColumnName("std_kdr");

                    b.Property<float?>("STDKills")
                        .HasColumnType("real")
                        .HasColumnName("std_kills");

                    b.Property<float?>("STDKph")
                        .HasColumnType("real")
                        .HasColumnName("std_kph");

                    b.Property<float?>("STDPlayTime")
                        .HasColumnType("real")
                        .HasColumnName("std_play_time");

                    b.Property<float?>("STDScore")
                        .HasColumnType("real")
                        .HasColumnName("std_score");

                    b.Property<float?>("STDVehicleKills")
                        .HasColumnType("real")
                        .HasColumnName("std_vehicle_kills");

                    b.Property<float?>("STDVkph")
                        .HasColumnType("real")
                        .HasColumnName("std_vkph");

                    b.Property<long?>("SumDeaths")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_deaths");

                    b.Property<long?>("SumFireCount")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_fire_count");

                    b.Property<long?>("SumHeadshots")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_headshots");

                    b.Property<long?>("SumHitCount")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_hit_count");

                    b.Property<long?>("SumKills")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_kills");

                    b.Property<long?>("SumPlayTime")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_play_time");

                    b.Property<long?>("SumScore")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_score");

                    b.Property<long?>("SumVehicleKills")
                        .HasColumnType("bigint")
                        .HasColumnName("sum_vehicle_kills");

                    b.HasKey("ItemId", "VehicleId")
                        .HasName("p_k_weapon_aggregate");

                    b.ToTable("weapon_aggregate", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.World", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_world");

                    b.ToTable("world", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Zone", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("HexSize")
                        .HasColumnType("integer")
                        .HasColumnName("hex_size");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_zone");

                    b.ToTable("zone", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.ZoneOwnershipSnapshot", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<int>("FactionId")
                        .HasColumnType("integer")
                        .HasColumnName("faction_id");

                    b.Property<int?>("MetagameInstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("metagame_instance_id");

                    b.HasKey("Timestamp", "WorldId", "ZoneId", "RegionId")
                        .HasName("p_k_zone_ownership_snapshot");

                    b.HasIndex("WorldId", "MetagameInstanceId")
                        .HasDatabaseName("i_x_zone_ownership_snapshot_world_id_metagame_instance_id");

                    b.ToTable("zone_ownership_snapshot", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.UpdaterScheduler", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_date");

                    b.HasKey("Id")
                        .HasName("p_k_updater_scheduler");

                    b.ToTable("updater_scheduler", (string)null);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterDirective", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", null)
                        .WithMany("Directives")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_directive_character_character_id");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterDirectiveObjective", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", null)
                        .WithMany("DirectiveObjectives")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_directive_objective_character_character_id");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterDirectiveTier", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", null)
                        .WithMany("DirectiveTiers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_directive_tier_character_character_id");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterDirectiveTree", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", null)
                        .WithMany("DirectiveTrees")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_directive_tree_character_character_id");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("LifetimeStats")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_lifetime_stat_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("LifetimeStatsByFaction")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_lifetime_stat_by_faction_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterRating", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("Rating")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterRating", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_rating_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("Stats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_stat_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("StatsByFaction")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_stat_by_faction_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatHistory", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("StatsHistory")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_stat_history_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("Time")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_time_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("WeaponStats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_weapon_stat_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("WeaponStatsByFaction")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_character_weapon_stat_by_faction_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("OutfitMembership")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_outfit_member_character_character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.VehicleFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Vehicle", "Vehicle")
                        .WithMany("Faction")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_vehicle_faction_vehicle_vehicle_id");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Character", b =>
                {
                    b.Navigation("DirectiveObjectives");

                    b.Navigation("DirectiveTiers");

                    b.Navigation("DirectiveTrees");

                    b.Navigation("Directives");

                    b.Navigation("LifetimeStats");

                    b.Navigation("LifetimeStatsByFaction");

                    b.Navigation("OutfitMembership");

                    b.Navigation("Rating");

                    b.Navigation("Stats");

                    b.Navigation("StatsByFaction");

                    b.Navigation("StatsHistory");

                    b.Navigation("Time");

                    b.Navigation("WeaponStats");

                    b.Navigation("WeaponStatsByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Vehicle", b =>
                {
                    b.Navigation("Faction");
                });
#pragma warning restore 612, 618
        }
    }
}
